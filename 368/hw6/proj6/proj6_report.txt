For project 6, my first approach was to use a 2d matrix of structures which would each represent a node and its various weights to its surrounding indeces and then run Dijkstras algorithm on the entire matrix. However, I quickly ran into some problems with valgrind while implementing a priority queue and decided to change my approach. 

After the first approach, I decided to just stick to matrices since they are much easier to free in the end. With 3 matrices, I was able to represent the number of turns needed to get to that location and also the weights of the paths to the surrounding indeces. With many if statements and conditions, I was able to successfully figure out the exact weight in every scenario and run my Dijkstra's algorithm in a time complexity of n^2 since I go through the matrix with two for loops during my implementation. Not the best implementation, but it seems to do the job for the small test cases. 
