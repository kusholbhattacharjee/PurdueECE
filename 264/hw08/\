/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "team.h"

struct Team create_team(char* name, int population, struct Person* people){
	struct Team t;
	t.head = NULL;
	t.name = _strdup(name);
	t.tail = NULL;
	int i = 0;
	struct PersonNode* looper = NULL;
	while(i<population){
		add_person(&t,people[i].name,NULL);
		i++;
	}
	i = 0;
	looper = t.head;
	while(looper!=NULL){
		looper->value->favorite = find_person(&t,people[i].favorite->name);
		looper = looper->next;
		i++;
	}
	//free(looper);
	return t;
}


void free_team(struct Team* team){
	if(team->head !=NULL){	
		struct PersonNode* p = team->head;
		struct PersonNode* q = team->head->next;
		while(p != NULL){	
			q = p->next;
			//detach_person(team,p->value->name);
			//free(p->value->name);
			free_person(p->value);
			free(p);
			p = q;
		}
	}
	return;
}


struct Person* find_person(struct Team* team, char * name){
	struct PersonNode* i = team->head;
	while (i!=NULL){
		if(strcmp(i->value->name,name)==0){
			return i->value;
		}
		i = i->next;
	}
	return NULL;
}

struct Person* add_person(struct Team* team, char * name, char * favorite_name){
	struct PersonNode* insert = malloc(sizeof(*insert));
	insert->value = malloc(sizeof(struct Person));
	insert->value->name = malloc(sizeof(char)*strlen(name));
	insert->value->name = name;
	if (favorite_name != NULL){
		insert->value->favorite = find_person(team,favorite_name);
	}
	else{
		insert->value->favorite = NULL;
	}
	insert->next = NULL;
	insert->prev = NULL;

	if (team->head == NULL){
		team->head = insert;
		team->tail = insert;
		return insert->value;
	}

	struct PersonNode* position = team->head;
	while(position->next !=NULL){
		position = position->next;
	}
	position->next = insert;
	team->tail = insert;
	return insert->value;
}

struct Person* detach_person(struct Team* team, char* name){
	struct Person* person = find_person(team,name); 
	struct Person* copy = person;
	//printf("%s\n",person->name);

	struct PersonNode* p = team->head;
	if(p==NULL){
		return copy;
	}
	
	if(p->value==person){
		team->head = p->next;
		free(p);
		//free_person(p->value);
		return copy;
	}

	struct PersonNode *q = p->next;
	while(q!=NULL && q->value!=person){
		p = p->next;
		q = q->next;
	}
	if(q!=NULL){
		p->next = q->next;
		free(q);
		//free_person(q->value);
	}
	return copy;
}

void free_person(struct Person* person){
	free(person->name);
	free(person);
}



void fprint_team(struct Team* team, FILE* stream){
	struct PersonNode* t = malloc(sizeof(*t));
	t = team->head;
	int max_len = 0;
	int x = 0;
	while (t!=NULL){	
		x = strlen(t->value->name);
		if (x>max_len){
			max_len=x;
		}
		t = t->next;
	}
	t = team->head;
	int line = 0;
	while (t!=NULL){
		if(line==0){
			fprintf(stream,"%s\n",team->name);
			line++;
			continue;
		}
		else if(line==1){
			fprintf(stream,"- members: ");
		}
		else{
			fprintf(stream,"           ");
		}
		fprintf(stream,"%s",t->value->name);
		int i = 0;
		for(i = strlen(t->value->name);i<max_len;i++){
			fprintf(stream," ");
		}
		fprintf(stream," (favorite: %s)\n",t->value->favorite->name);
		t=t->next;
		line++;
	}
	free(t);
	return;
}
char* _strdup(char* s){
	return strcpy(malloc(sizeof(*s)*(strlen(s)+1)),s);
}

